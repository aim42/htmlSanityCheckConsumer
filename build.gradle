buildscript {
    repositories {
        maven {
            url uri('../repo')
        }
        jcenter()
        maven {
            name 'Bintray Asciidoctor repo'
            url  'http://dl.bintray.com/content/aalmiray/asciidoctor'
        }
        mavenCentral()
    }

    dependencies {
        classpath (group: 'org.aim42',
                name: 'htmlSanityCheck',
                version: '0.2.0-SNAPSHOT')

        classpath (group: 'org.asciidoctor',
                    name: 'asciidoctor-gradle-plugin',
                    version: '1.5.0')
    }
}

// ==== path definitions =====
// ===========================

// location of AsciiDoc files
def asciidocSrcPath = "$projectDir/src/asciidoc"

// location of images used in AsciiDoc documentation
def srcImagesPath = "$asciidocSrcPath/images"

// results of asciidoc compilitation (HTML) is stored
def htmlOutputPath = "$buildDir/docs"

// images used by generated html
def targetImagesPath =   htmlOutputPath + "/images"

// where HTMLSanityCheck checkingresults ares stored
def checkingResultsPath = "$buildDir/report/"

// what file to check
// TODO: convert to FileCollection for 1.5.1
def inputFileName = "tryme"

def inputFilePath = asciidocSrcPath + "/" + inputFileName + ".adoc"


// ==== asciidoctor ==========
// ===========================

apply plugin: 'org.asciidoctor.gradle.asciidoctor'

asciidoctor {
    outputDir = new File( htmlOutputPath )
    //baseDir = project.file('src/asciidoc')
    sourceDocumentNames = files( new File( inputFilePath ))
    options = [
            attributes: [
                    imagesdir   : 'images'
            ]
    ]

}


// ==== see that images are copied into build/docs directory =====
task copyImages(
        type: Copy,
        description: 'copy images into build output folder can be resolved '
) {
    from srcImagesPath
    into targetImagesPath
    include( '**/*.jpg', '**/*.png', '**/*.svg')
}


copyImages.mustRunAfter asciidoctor


apply plugin: 'htmlSanityCheck'

htmlSanityCheck {
    // ensure asciidoctor->html runs first
    // and images are copied to build directory
    dependsOn asciidoctor, copyImages

    //verbose = false
    // make the asciidoctor output directory/file our input directory (aka sourceDir)...
    sourceDir = project.file( htmlOutputPath )

    // imageDir needs to be relative to sourceDir
    imageDir = new File( targetImagesPath )


    outputDir = new File( checkingResultsPath )
    sourceDocumentName = project.file( htmlOutputPath + "/" + inputFileName + ".html")

    checkExternalLinks = false

}


task info(
        description: "info on several paths"
) <<
        {
            println "project.name         : " + project.name
            println "projectDir           : " + projectDir
            println "buildDir             : " + buildDir
            println "="*100
            println "asciidoc src files   : " + asciidocSrcPath
            println "source images        : " + srcImagesPath
            println "asciidoc html output : " + htmlOutputPath
            println "target images path   : " + targetImagesPath
            println "checkingResultsPath  : " + checkingResultsPath
        }
